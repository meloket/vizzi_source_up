let placeSearch;
let componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
};
function fillInAddress(autocomplete) {
    let place = autocomplete.getPlace();
    let streetNumber = "";
    let btn = document.querySelector('.project-btn');
    let alert = document.querySelector('.project-alert');
    clearAllFieldsValue()
    for (let i = 0; i < place.address_components.length; i++) {
        let addressType = place.address_components[i].types[0];
        let val = place.address_components[i][componentForm[addressType]];
        if (componentForm[addressType]) {
            switch (addressType) {
                case "street_number":
                    streetNumber = val;
                    break
                case "route":
                    setAllFieldsValue('[data-address]', streetNumber + " " + val);
                    break
                case "locality":
                    setAllFieldsValue('[data-city]', val);
                    break
                case "administrative_area_level_1":
                    setAllFieldsValue('[data-state]', val);
                    break
                case "postal_code":
                    setAllFieldsValue('[data-zip]', val);
                    break
                case "country":
                    setAllFieldsValue('[data-country]', val);
                    if (alert!== null && alert.length > 0){
                        if(!(val === 'United States')){
                            alert.style.display = 'block'
                            btn.disabled = true;

                        }else{
                            btn.disabled = false;
                            alert.style.display = 'none'

                        }
                    }

                    break
            }
        }
    }
}

function clearAllFieldsValue(data) {
    let dataArray = [  "[data-city]", "[data-state]", "[data-country]", "[data-zip]"];

    for (dataItem in dataArray) {
        let input = document.querySelectorAll(dataArray[dataItem]);
        for (let i = 0; i < input.length; i++) {
            input[i].value = "";
        }
    }

}

function setAllFieldsValue(data, val) {
    let input = document.querySelectorAll(data);
    for (let i = 0; i < input.length; i++) {
        input[i].value = val;
    }
}

function geolocate() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            let geolocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            let circle = new google.maps.Circle({
                center: geolocation,
                radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
        });
    }
}
